/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
(() => {
var exports = {};
exports.id = "app/api/argue/route";
exports.ids = ["app/api/argue/route"];
exports.modules = {

/***/ "(rsc)/./app/api/argue/route.ts":
/*!********************************!*\
  !*** ./app/api/argue/route.ts ***!
  \********************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   POST: () => (/* binding */ POST)\n/* harmony export */ });\n/* harmony import */ var next_server__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! next/server */ \"(rsc)/./node_modules/next/dist/api/server.js\");\n\nconst OPENROUTER_URL = \"https://openrouter.ai/api/v1/chat/completions\";\nconst OPENROUTER_MODEL = process.env.OPENROUTER_MODEL ?? \"deepseek/deepseek-chat-v3.1:free\";\nconst MODEL_FALLBACKS = process.env.OPENROUTER_MODELS ?? `${OPENROUTER_MODEL},openrouter/auto`;\nasync function POST(request) {\n    try {\n        const { opponentLine, intensity } = await request.json();\n        if (typeof opponentLine !== \"string\") {\n            return next_server__WEBPACK_IMPORTED_MODULE_0__.NextResponse.json({\n                error: \"请提供对方的话（字符串）。\"\n            }, {\n                status: 400\n            });\n        }\n        const trimmedOpponentLine = opponentLine.trim();\n        if (!trimmedOpponentLine) {\n            return next_server__WEBPACK_IMPORTED_MODULE_0__.NextResponse.json({\n                error: \"请先输入对方说了什么。\"\n            }, {\n                status: 400\n            });\n        }\n        const parsedIntensity = typeof intensity === \"number\" ? clampIntensity(intensity) : typeof intensity === \"string\" ? clampIntensity(Number.parseInt(intensity, 10)) : DEFAULT_INTENSITY;\n        const apiKey = process.env.OPENROUTER_API_KEY;\n        if (!apiKey) {\n            console.error(\"OPENROUTER_API_KEY missing\");\n            return next_server__WEBPACK_IMPORTED_MODULE_0__.NextResponse.json({\n                error: \"服务器未正确配置 OpenRouter API Key。\"\n            }, {\n                status: 500\n            });\n        }\n        const referer = request.headers.get(\"origin\") ?? \"https://localhost-placeholder\";\n        const models = parseModelList(MODEL_FALLBACKS);\n        const stream = new ReadableStream({\n            start: async (controller)=>{\n                const encoder = new TextEncoder();\n                const send = (chunk)=>{\n                    controller.enqueue(encoder.encode(`${JSON.stringify(chunk)}\\n`));\n                };\n                const errors = [];\n                const closeWithError = (error, status = 500)=>{\n                    send({\n                        type: \"error\",\n                        error,\n                        status\n                    });\n                    controller.close();\n                };\n                try {\n                    for (const model of models){\n                        send({\n                            type: \"model\",\n                            model\n                        });\n                        const completionResponse = await fetch(OPENROUTER_URL, {\n                            method: \"POST\",\n                            headers: {\n                                Authorization: `Bearer ${apiKey}`,\n                                \"Content-Type\": \"application/json\",\n                                \"HTTP-Referer\": referer,\n                                // HTTP headers must stay within the Latin-1 charset; use ASCII-only title.\n                                \"X-Title\": \"Chaojia\"\n                            },\n                            body: JSON.stringify({\n                                model,\n                                stream: true,\n                                messages: buildMessages(trimmedOpponentLine, parsedIntensity),\n                                temperature: mapIntensityToTemperature(parsedIntensity),\n                                top_p: 0.9,\n                                max_tokens: 512,\n                                presence_penalty: mapIntensityToPresencePenalty(parsedIntensity)\n                            })\n                        });\n                        if (!completionResponse.ok) {\n                            const errorPayload = await safeRead(completionResponse);\n                            const errorMessage = extractErrorMessage(errorPayload);\n                            console.error(\"OpenRouter error\", {\n                                model,\n                                error: errorPayload\n                            });\n                            errors.push({\n                                model,\n                                status: completionResponse.status,\n                                message: errorMessage\n                            });\n                            if (!shouldRetry(completionResponse.status, errorMessage)) {\n                                closeWithError(errorMessage, completionResponse.status);\n                                return;\n                            }\n                            continue;\n                        }\n                        const body = completionResponse.body;\n                        if (!body) {\n                            errors.push({\n                                model,\n                                status: 502,\n                                message: \"模型返回空响应，请稍后再试。\"\n                            });\n                            continue;\n                        }\n                        const reader = body.getReader();\n                        const decoder = new TextDecoder(\"utf-8\");\n                        let buffer = \"\";\n                        let aggregated = \"\";\n                        let lastSent = [];\n                        const flushPartial = ()=>{\n                            const replies = collectReplies(aggregated);\n                            if (replies.length === 0) {\n                                return;\n                            }\n                            if (arraysEqual(replies, lastSent)) {\n                                return;\n                            }\n                            lastSent = replies;\n                            send({\n                                type: \"partial\",\n                                replies\n                            });\n                        };\n                        let streamFailed = false;\n                        while(true){\n                            const { value, done } = await reader.read();\n                            if (done) {\n                                break;\n                            }\n                            buffer += decoder.decode(value, {\n                                stream: true\n                            });\n                            const events = buffer.split(\"\\n\\n\");\n                            buffer = events.pop() ?? \"\";\n                            for (const event of events){\n                                const lines = event.split(\"\\n\");\n                                for (const rawLine of lines){\n                                    const line = rawLine.trim();\n                                    if (!line.startsWith(\"data:\")) {\n                                        continue;\n                                    }\n                                    const data = line.slice(5).trim();\n                                    if (!data || data === \"[DONE]\") {\n                                        continue;\n                                    }\n                                    let parsed;\n                                    try {\n                                        parsed = JSON.parse(data);\n                                    } catch (parseError) {\n                                        console.warn(\"Failed to parse streaming chunk\", parseError, data);\n                                        continue;\n                                    }\n                                    const deltaText = extractDeltaText(parsed);\n                                    if (!deltaText) {\n                                        continue;\n                                    }\n                                    aggregated += deltaText;\n                                    flushPartial();\n                                }\n                            }\n                        }\n                        aggregated = aggregated.trim();\n                        const replies = collectReplies(aggregated);\n                        if (replies.length === 0) {\n                            const message = \"模型暂时给不出答案，请换个描述再试试。\";\n                            errors.push({\n                                model,\n                                status: 502,\n                                message\n                            });\n                            streamFailed = true;\n                        } else {\n                            send({\n                                type: \"complete\",\n                                replies\n                            });\n                            controller.close();\n                            return;\n                        }\n                        if (streamFailed) {\n                            continue;\n                        }\n                    }\n                    if (errors.length > 0) {\n                        const [firstError] = errors;\n                        const combined = [\n                            firstError.message,\n                            ...errors.slice(1).map((error)=>`${error.model}: ${error.message}`)\n                        ].filter(Boolean).join(\" ｜ \");\n                        closeWithError(combined || \"模型接口请求失败，请稍后再试。\", firstError.status);\n                    } else {\n                        closeWithError(\"模型接口请求失败，请稍后再试。\", 502);\n                    }\n                } catch (error) {\n                    console.error(\"Streaming pipeline failed\", error);\n                    closeWithError(\"服务暂时不可用，请稍后重试。\", 500);\n                }\n            }\n        });\n        return new Response(stream, {\n            status: 200,\n            headers: {\n                \"Content-Type\": \"application/x-ndjson\",\n                \"Cache-Control\": \"no-cache, no-transform\",\n                Connection: \"keep-alive\",\n                \"Transfer-Encoding\": \"chunked\"\n            }\n        });\n    } catch (error) {\n        console.error(error);\n        return next_server__WEBPACK_IMPORTED_MODULE_0__.NextResponse.json({\n            error: \"服务暂时不可用，请稍后重试。\"\n        }, {\n            status: 500\n        });\n    }\n}\nconst MIN_INTENSITY = 1;\nconst MAX_INTENSITY = 10;\nconst DEFAULT_INTENSITY = 6;\nfunction buildMessages(opponentLine, intensity) {\n    const toneGuide = describeTone(intensity);\n    return [\n        {\n            role: \"system\",\n            content: [\n                \"你是一名中文犀利斗嘴高手，擅长高情商反击。\",\n                \"始终遵守：输出干净利落，不涉及人身攻击，不触碰法律或伦理底线，也不包含脏话。\",\n                \"禁止输出 <think>、思考过程或任何除最终答案外的文本；不要使用 Markdown 代码块。\",\n                \"所有回答必须严格以 JSON 数组返回，数组包含 3 个纯文本字符串。\"\n            ].join(\" \")\n        },\n        {\n            role: \"user\",\n            content: [\n                \"场景：我在社交平台和人吵架，需要你给出 3 条不同的中文回击。\",\n                `对方的话：${opponentLine}`,\n                `语气强度：${intensity}/10，描述：${toneGuide}`,\n                \"请输出一个 JSON 数组，数组包含 3 个字符串，每条字符串就是一条回击内容，不要包含任何额外文字。\"\n            ].join(\"\\n\")\n        }\n    ];\n}\nfunction describeTone(intensity) {\n    if (intensity <= 3) {\n        return \"保持礼貌、机智、含蓄，但措辞要有感染力。\";\n    }\n    if (intensity <= 7) {\n        return \"直接犀利、针锋相对，同时保持逻辑性和幽默感。\";\n    }\n    return \"言辞犀利、霸气、毫不退让，但仍然避免低俗或明显人身攻击。\";\n}\nfunction mapIntensityToTemperature(intensity) {\n    const normalized = (intensity - MIN_INTENSITY) / (MAX_INTENSITY - MIN_INTENSITY);\n    return Number((0.35 + normalized * 0.65).toFixed(2));\n}\nfunction mapIntensityToPresencePenalty(intensity) {\n    const normalized = (intensity - MIN_INTENSITY) / (MAX_INTENSITY - MIN_INTENSITY);\n    return Number((0.1 + normalized * 0.8).toFixed(2));\n}\nfunction clampIntensity(value) {\n    if (Number.isNaN(value)) {\n        return DEFAULT_INTENSITY;\n    }\n    return Math.min(Math.max(value, MIN_INTENSITY), MAX_INTENSITY);\n}\nfunction normalizeReplies(payload) {\n    if (typeof payload === \"object\" && payload !== null && \"choices\" in payload && Array.isArray(payload.choices)) {\n        const choice = payload.choices[0];\n        const content = extractMessageContent(choice?.message?.content);\n        return collectReplies(content);\n    }\n    return [];\n}\nfunction tryParseJsonArray(raw) {\n    if (!raw) {\n        return [];\n    }\n    try {\n        const parsed = JSON.parse(raw);\n        if (Array.isArray(parsed)) {\n            return parsed.filter((item)=>typeof item === \"string\").map((item)=>item.trim()).filter((item)=>item.length > 0).slice(0, 3);\n        }\n    } catch (error) {\n        console.warn(\"Failed to parse JSON array\", error, raw);\n    }\n    return [];\n}\nfunction fallbackSplit(raw) {\n    if (!raw) {\n        return [];\n    }\n    const forbiddenPatterns = [\n        /^<think\\b[^>]*>/i,\n        /^<\\/think>/i,\n        /^场景[:：]/,\n        /^我的角色[:：]/,\n        /^请[^\\n]*JSON/,\n        /^用户[^\\n]*要求/,\n        /^思考[:：]/,\n        /^角色设定[:：]/\n    ];\n    const forbiddenKeywords = [\n        \"场景：\",\n        \"输出必须\",\n        \"高情商反击\",\n        \"关键点\",\n        \"不要输出\",\n        \"请确保\",\n        \"JSON\"\n    ];\n    return raw.split(/\\n+/).map((line)=>line.replace(/^[\\s\\d\\-•、.]+/, \"\").trim()).filter((line)=>line.length > 0).filter((line)=>!forbiddenPatterns.some((pattern)=>pattern.test(line))).filter((line)=>!forbiddenKeywords.some((keyword)=>line.includes(keyword))).filter(isLikelyReply).slice(0, 3);\n}\nasync function safeRead(response) {\n    try {\n        return await response.json();\n    } catch  {\n        try {\n            return {\n                error: await response.text()\n            };\n        } catch  {\n            return null;\n        }\n    }\n}\nfunction extractErrorMessage(payload) {\n    if (typeof payload === \"object\" && payload !== null && \"error\" in payload) {\n        const error = payload.error;\n        if (typeof error === \"string\" && error.trim()) {\n            return error.trim();\n        }\n        if (typeof error === \"object\" && error !== null && \"message\" in error && typeof error.message === \"string\") {\n            const message = error.message.trim();\n            if (message) {\n                return message;\n            }\n        }\n    }\n    if (typeof payload === \"object\" && payload !== null && \"message\" in payload && typeof payload.message === \"string\") {\n        const fallback = payload.message.trim();\n        if (fallback) {\n            return fallback;\n        }\n    }\n    return \"模型接口请求失败，请稍后再试。\";\n}\nfunction parseModelList(raw) {\n    return raw.split(\",\").map((item)=>item.trim()).filter((item)=>item.length > 0);\n}\nfunction shouldRetry(status, message) {\n    if (status >= 500) {\n        return true;\n    }\n    const lowered = message.toLowerCase();\n    return lowered.includes(\"provider returned error\") || lowered.includes(\"no endpoints found\") || lowered.includes(\"upstream error\") || lowered.includes(\"temporarily unavailable\");\n}\nfunction sanitizeContent(raw) {\n    if (!raw) {\n        return \"\";\n    }\n    return raw.replace(/<think\\b[^>]*>[\\s\\S]*?<\\/think>/gi, \"\").trim();\n}\nfunction extractJsonArrayFromText(raw) {\n    if (!raw) {\n        return null;\n    }\n    const start = raw.indexOf(\"[\");\n    const end = raw.lastIndexOf(\"]\");\n    if (start === -1 || end === -1 || end <= start) {\n        return null;\n    }\n    return raw.slice(start, end + 1);\n}\nfunction extractMessageContent(raw) {\n    if (typeof raw === \"string\") {\n        return raw;\n    }\n    if (Array.isArray(raw)) {\n        return raw.map((item)=>{\n            if (typeof item === \"string\") {\n                return item;\n            }\n            if (typeof item === \"object\" && item !== null && \"text\" in item && typeof item.text === \"string\") {\n                return item.text;\n            }\n            return \"\";\n        }).join(\"\\n\");\n    }\n    if (typeof raw === \"object\" && raw !== null && \"text\" in raw && typeof raw.text === \"string\") {\n        return raw.text;\n    }\n    return \"\";\n}\nfunction isLikelyReply(line) {\n    if (line.length < 6) {\n        return false;\n    }\n    const disallowedStarts = [\n        \"场景\",\n        \"角色\",\n        \"输出\",\n        \"说明\",\n        \"提示\"\n    ];\n    if (disallowedStarts.some((prefix)=>line.startsWith(prefix))) {\n        return false;\n    }\n    const hasSentencePunctuation = /[。？！?!…～~]/.test(line);\n    if (hasSentencePunctuation) {\n        return true;\n    }\n    // Allow short punchlines but require at least one Chinese character.\n    return /[\\u4e00-\\u9fa5]/.test(line) && line.length >= 8;\n}\nfunction extractDeltaText(payload) {\n    if (typeof payload === \"object\" && payload !== null && \"choices\" in payload && Array.isArray(payload.choices)) {\n        const choice = payload.choices[0];\n        if (typeof choice === \"object\" && choice !== null && \"delta\" in choice && typeof choice.delta === \"object\" && choice.delta !== null) {\n            const delta = choice.delta;\n            if (typeof delta === \"object\" && delta !== null && \"content\" in delta) {\n                return extractMessageContent(delta.content);\n            }\n        }\n        if (typeof choice === \"object\" && choice !== null && \"message\" in choice && typeof choice.message === \"object\") {\n            return extractMessageContent(choice.message);\n        }\n    }\n    return \"\";\n}\nfunction arraysEqual(a, b) {\n    if (a.length !== b.length) {\n        return false;\n    }\n    return a.every((item, index)=>item === b[index]);\n}\nfunction collectReplies(rawContent) {\n    const sanitized = sanitizeContent(rawContent);\n    const parsed = tryParseJsonArray(sanitized);\n    if (parsed.length > 0) {\n        return parsed;\n    }\n    const extracted = extractJsonArrayFromText(sanitized);\n    if (extracted) {\n        const extractedParsed = tryParseJsonArray(extracted);\n        if (extractedParsed.length > 0) {\n            return extractedParsed;\n        }\n    }\n    return fallbackSplit(sanitized);\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(rsc)/./app/api/argue/route.ts\n");

/***/ }),

/***/ "(rsc)/./node_modules/next/dist/build/webpack/loaders/next-app-loader/index.js?name=app%2Fapi%2Fargue%2Froute&page=%2Fapi%2Fargue%2Froute&appPaths=&pagePath=private-next-app-dir%2Fapi%2Fargue%2Froute.ts&appDir=%2FUsers%2Fzhangtao%2FDocuments%2FWeb%2Fchaojia%2Fapp&pageExtensions=tsx&pageExtensions=ts&pageExtensions=jsx&pageExtensions=js&rootDir=%2FUsers%2Fzhangtao%2FDocuments%2FWeb%2Fchaojia&isDev=true&tsconfigPath=tsconfig.json&basePath=&assetPrefix=&nextConfigOutput=&preferredRegion=&middlewareConfig=e30%3D&isGlobalNotFoundEnabled=!":

  !*** ./node_modules/next/dist/build/webpack/loaders/next-app-loader/index.js?name=app%2Fapi%2Fargue%2Froute&page=%2Fapi%2Fargue%2Froute&appPaths=&pagePath=private-next-app-dir%2Fapi%2Fargue%2Froute.ts&appDir=%2FUsers%2Fzhangtao%2FDocuments%2FWeb%2Fchaojia%2Fapp&pageExtensions=tsx&pageExtensions=ts&pageExtensions=jsx&pageExtensions=js&rootDir=%2FUsers%2Fzhangtao%2FDocuments%2FWeb%2Fchaojia&isDev=true&tsconfigPath=tsconfig.json&basePath=&assetPrefix=&nextConfigOutput=&preferredRegion=&middlewareConfig=e30%3D&isGlobalNotFoundEnabled=! ***!

/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   handler: () => (/* binding */ handler),\n/* harmony export */   patchFetch: () => (/* binding */ patchFetch),\n/* harmony export */   routeModule: () => (/* binding */ routeModule),\n/* harmony export */   serverHooks: () => (/* binding */ serverHooks),\n/* harmony export */   workAsyncStorage: () => (/* binding */ workAsyncStorage),\n/* harmony export */   workUnitAsyncStorage: () => (/* binding */ workUnitAsyncStorage)\n/* harmony export */ });\n/* harmony import */ var next_dist_server_route_modules_app_route_module_compiled__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! next/dist/server/route-modules/app-route/module.compiled */ \"(rsc)/./node_modules/next/dist/server/route-modules/app-route/module.compiled.js\");\n/* harmony import */ var next_dist_server_route_modules_app_route_module_compiled__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(next_dist_server_route_modules_app_route_module_compiled__WEBPACK_IMPORTED_MODULE_0__);\n/* harmony import */ var next_dist_server_route_kind__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! next/dist/server/route-kind */ \"(rsc)/./node_modules/next/dist/server/route-kind.js\");\n/* harmony import */ var next_dist_server_lib_patch_fetch__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! next/dist/server/lib/patch-fetch */ \"(rsc)/./node_modules/next/dist/server/lib/patch-fetch.js\");\n/* harmony import */ var next_dist_server_lib_patch_fetch__WEBPACK_IMPORTED_MODULE_2___default = /*#__PURE__*/__webpack_require__.n(next_dist_server_lib_patch_fetch__WEBPACK_IMPORTED_MODULE_2__);\n/* harmony import */ var next_dist_server_request_meta__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! next/dist/server/request-meta */ \"(rsc)/./node_modules/next/dist/server/request-meta.js\");\n/* harmony import */ var next_dist_server_request_meta__WEBPACK_IMPORTED_MODULE_3___default = /*#__PURE__*/__webpack_require__.n(next_dist_server_request_meta__WEBPACK_IMPORTED_MODULE_3__);\n/* harmony import */ var next_dist_server_lib_trace_tracer__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! next/dist/server/lib/trace/tracer */ \"(rsc)/./node_modules/next/dist/server/lib/trace/tracer.js\");\n/* harmony import */ var next_dist_server_lib_trace_tracer__WEBPACK_IMPORTED_MODULE_4___default = /*#__PURE__*/__webpack_require__.n(next_dist_server_lib_trace_tracer__WEBPACK_IMPORTED_MODULE_4__);\n/* harmony import */ var next_dist_shared_lib_router_utils_app_paths__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! next/dist/shared/lib/router/utils/app-paths */ \"next/dist/shared/lib/router/utils/app-paths\");\n/* harmony import */ var next_dist_shared_lib_router_utils_app_paths__WEBPACK_IMPORTED_MODULE_5___default = /*#__PURE__*/__webpack_require__.n(next_dist_shared_lib_router_utils_app_paths__WEBPACK_IMPORTED_MODULE_5__);\n/* harmony import */ var next_dist_server_base_http_node__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! next/dist/server/base-http/node */ \"(rsc)/./node_modules/next/dist/server/base-http/node.js\");\n/* harmony import */ var next_dist_server_base_http_node__WEBPACK_IMPORTED_MODULE_6___default = /*#__PURE__*/__webpack_require__.n(next_dist_server_base_http_node__WEBPACK_IMPORTED_MODULE_6__);\n/* harmony import */ var next_dist_server_web_spec_extension_adapters_next_request__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! next/dist/server/web/spec-extension/adapters/next-request */ \"(rsc)/./node_modules/next/dist/server/web/spec-extension/adapters/next-request.js\");\n/* harmony import */ var next_dist_server_web_spec_extension_adapters_next_request__WEBPACK_IMPORTED_MODULE_7___default = /*#__PURE__*/__webpack_require__.n(next_dist_server_web_spec_extension_adapters_next_request__WEBPACK_IMPORTED_MODULE_7__);\n/* harmony import */ var next_dist_server_lib_trace_constants__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(/*! next/dist/server/lib/trace/constants */ \"(rsc)/./node_modules/next/dist/server/lib/trace/constants.js\");\n/* harmony import */ var next_dist_server_lib_trace_constants__WEBPACK_IMPORTED_MODULE_8___default = /*#__PURE__*/__webpack_require__.n(next_dist_server_lib_trace_constants__WEBPACK_IMPORTED_MODULE_8__);\n/* harmony import */ var next_dist_server_instrumentation_utils__WEBPACK_IMPORTED_MODULE_9__ = __webpack_require__(/*! next/dist/server/instrumentation/utils */ \"(rsc)/./node_modules/next/dist/server/instrumentation/utils.js\");\n/* harmony import */ var next_dist_server_send_response__WEBPACK_IMPORTED_MODULE_10__ = __webpack_require__(/*! next/dist/server/send-response */ \"(rsc)/./node_modules/next/dist/server/send-response.js\");\n/* harmony import */ var next_dist_server_web_utils__WEBPACK_IMPORTED_MODULE_11__ = __webpack_require__(/*! next/dist/server/web/utils */ \"(rsc)/./node_modules/next/dist/server/web/utils.js\");\n/* harmony import */ var next_dist_server_web_utils__WEBPACK_IMPORTED_MODULE_11___default = /*#__PURE__*/__webpack_require__.n(next_dist_server_web_utils__WEBPACK_IMPORTED_MODULE_11__);\n/* harmony import */ var next_dist_server_lib_cache_control__WEBPACK_IMPORTED_MODULE_12__ = __webpack_require__(/*! next/dist/server/lib/cache-control */ \"(rsc)/./node_modules/next/dist/server/lib/cache-control.js\");\n/* harmony import */ var next_dist_lib_constants__WEBPACK_IMPORTED_MODULE_13__ = __webpack_require__(/*! next/dist/lib/constants */ \"(rsc)/./node_modules/next/dist/lib/constants.js\");\n/* harmony import */ var next_dist_lib_constants__WEBPACK_IMPORTED_MODULE_13___default = /*#__PURE__*/__webpack_require__.n(next_dist_lib_constants__WEBPACK_IMPORTED_MODULE_13__);\n/* harmony import */ var next_dist_shared_lib_no_fallback_error_external__WEBPACK_IMPORTED_MODULE_14__ = __webpack_require__(/*! next/dist/shared/lib/no-fallback-error.external */ \"next/dist/shared/lib/no-fallback-error.external\");\n/* harmony import */ var next_dist_shared_lib_no_fallback_error_external__WEBPACK_IMPORTED_MODULE_14___default = /*#__PURE__*/__webpack_require__.n(next_dist_shared_lib_no_fallback_error_external__WEBPACK_IMPORTED_MODULE_14__);\n/* harmony import */ var next_dist_server_response_cache__WEBPACK_IMPORTED_MODULE_15__ = __webpack_require__(/*! next/dist/server/response-cache */ \"(rsc)/./node_modules/next/dist/server/response-cache/index.js\");\n/* harmony import */ var next_dist_server_response_cache__WEBPACK_IMPORTED_MODULE_15___default = /*#__PURE__*/__webpack_require__.n(next_dist_server_response_cache__WEBPACK_IMPORTED_MODULE_15__);\n/* harmony import */ var _Users_zhangtao_Documents_Web_chaojia_app_api_argue_route_ts__WEBPACK_IMPORTED_MODULE_16__ = __webpack_require__(/*! ./app/api/argue/route.ts */ \"(rsc)/./app/api/argue/route.ts\");\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n// We inject the nextConfigOutput here so that we can use them in the route\n// module.\nconst nextConfigOutput = \"\"\nconst routeModule = new next_dist_server_route_modules_app_route_module_compiled__WEBPACK_IMPORTED_MODULE_0__.AppRouteRouteModule({\n    definition: {\n        kind: next_dist_server_route_kind__WEBPACK_IMPORTED_MODULE_1__.RouteKind.APP_ROUTE,\n        page: \"/api/argue/route\",\n        pathname: \"/api/argue\",\n        filename: \"route\",\n        bundlePath: \"app/api/argue/route\"\n    },\n    distDir: \".next\" || 0,\n    relativeProjectDir:  false || '',\n    resolvedPagePath: \"/Users/zhangtao/Documents/Web/chaojia/app/api/argue/route.ts\",\n    nextConfigOutput,\n    userland: _Users_zhangtao_Documents_Web_chaojia_app_api_argue_route_ts__WEBPACK_IMPORTED_MODULE_16__\n});\n// Pull out the exports that we need to expose from the module. This should\n// be eliminated when we've moved the other routes to the new format. These\n// are used to hook into the route.\nconst { workAsyncStorage, workUnitAsyncStorage, serverHooks } = routeModule;\nfunction patchFetch() {\n    return (0,next_dist_server_lib_patch_fetch__WEBPACK_IMPORTED_MODULE_2__.patchFetch)({\n        workAsyncStorage,\n        workUnitAsyncStorage\n    });\n}\n\nasync function handler(req, res, ctx) {\n    var _nextConfig_experimental;\n    let srcPage = \"/api/argue/route\";\n    // turbopack doesn't normalize `/index` in the page name\n    // so we need to to process dynamic routes properly\n    // TODO: fix turbopack providing differing value from webpack\n    if (false) {} else if (srcPage === '/index') {\n        // we always normalize /index specifically\n        srcPage = '/';\n    }\n    const multiZoneDraftMode = false;\n    const prepareResult = await routeModule.prepare(req, res, {\n        srcPage,\n        multiZoneDraftMode\n    });\n    if (!prepareResult) {\n        res.statusCode = 400;\n        res.end('Bad Request');\n        ctx.waitUntil == null ? void 0 : ctx.waitUntil.call(ctx, Promise.resolve());\n        return null;\n    }\n    const { buildId, params, nextConfig, isDraftMode, prerenderManifest, routerServerContext, isOnDemandRevalidate, revalidateOnlyGenerated, resolvedPathname } = prepareResult;\n    const normalizedSrcPage = (0,next_dist_shared_lib_router_utils_app_paths__WEBPACK_IMPORTED_MODULE_5__.normalizeAppPath)(srcPage);\n    let isIsr = Boolean(prerenderManifest.dynamicRoutes[normalizedSrcPage] || prerenderManifest.routes[resolvedPathname]);\n    if (isIsr && !isDraftMode) {\n        const isPrerendered = Boolean(prerenderManifest.routes[resolvedPathname]);\n        const prerenderInfo = prerenderManifest.dynamicRoutes[normalizedSrcPage];\n        if (prerenderInfo) {\n            if (prerenderInfo.fallback === false && !isPrerendered) {\n                throw new next_dist_shared_lib_no_fallback_error_external__WEBPACK_IMPORTED_MODULE_14__.NoFallbackError();\n            }\n        }\n    }\n    let cacheKey = null;\n    if (isIsr && !routeModule.isDev && !isDraftMode) {\n        cacheKey = resolvedPathname;\n        // ensure /index and / is normalized to one key\n        cacheKey = cacheKey === '/index' ? '/' : cacheKey;\n    }\n    const supportsDynamicResponse = // If we're in development, we always support dynamic HTML\n    routeModule.isDev === true || // If this is not SSG or does not have static paths, then it supports\n    // dynamic HTML.\n    !isIsr;\n    // This is a revalidation request if the request is for a static\n    // page and it is not being resumed from a postponed render and\n    // it is not a dynamic RSC request then it is a revalidation\n    // request.\n    const isRevalidate = isIsr && !supportsDynamicResponse;\n    const method = req.method || 'GET';\n    const tracer = (0,next_dist_server_lib_trace_tracer__WEBPACK_IMPORTED_MODULE_4__.getTracer)();\n    const activeSpan = tracer.getActiveScopeSpan();\n    const context = {\n        params,\n        prerenderManifest,\n        renderOpts: {\n            experimental: {\n                cacheComponents: Boolean(nextConfig.experimental.cacheComponents),\n                authInterrupts: Boolean(nextConfig.experimental.authInterrupts)\n            },\n            supportsDynamicResponse,\n            incrementalCache: (0,next_dist_server_request_meta__WEBPACK_IMPORTED_MODULE_3__.getRequestMeta)(req, 'incrementalCache'),\n            cacheLifeProfiles: (_nextConfig_experimental = nextConfig.experimental) == null ? void 0 : _nextConfig_experimental.cacheLife,\n            isRevalidate,\n            waitUntil: ctx.waitUntil,\n            onClose: (cb)=>{\n                res.on('close', cb);\n            },\n            onAfterTaskError: undefined,\n            onInstrumentationRequestError: (error, _request, errorContext)=>routeModule.onRequestError(req, error, errorContext, routerServerContext)\n        },\n        sharedContext: {\n            buildId\n        }\n    };\n    const nodeNextReq = new next_dist_server_base_http_node__WEBPACK_IMPORTED_MODULE_6__.NodeNextRequest(req);\n    const nodeNextRes = new next_dist_server_base_http_node__WEBPACK_IMPORTED_MODULE_6__.NodeNextResponse(res);\n    const nextReq = next_dist_server_web_spec_extension_adapters_next_request__WEBPACK_IMPORTED_MODULE_7__.NextRequestAdapter.fromNodeNextRequest(nodeNextReq, (0,next_dist_server_web_spec_extension_adapters_next_request__WEBPACK_IMPORTED_MODULE_7__.signalFromNodeResponse)(res));\n    try {\n        const invokeRouteModule = async (span)=>{\n            return routeModule.handle(nextReq, context).finally(()=>{\n                if (!span) return;\n                span.setAttributes({\n                    'http.status_code': res.statusCode,\n                    'next.rsc': false\n                });\n                const rootSpanAttributes = tracer.getRootSpanAttributes();\n                // We were unable to get attributes, probably OTEL is not enabled\n                if (!rootSpanAttributes) {\n                    return;\n                }\n                if (rootSpanAttributes.get('next.span_type') !== next_dist_server_lib_trace_constants__WEBPACK_IMPORTED_MODULE_8__.BaseServerSpan.handleRequest) {\n                    console.warn(`Unexpected root span type '${rootSpanAttributes.get('next.span_type')}'. Please report this Next.js issue https://github.com/vercel/next.js`);\n                    return;\n                }\n                const route = rootSpanAttributes.get('next.route');\n                if (route) {\n                    const name = `${method} ${route}`;\n                    span.setAttributes({\n                        'next.route': route,\n                        'http.route': route,\n                        'next.span_name': name\n                    });\n                    span.updateName(name);\n                } else {\n                    span.updateName(`${method} ${req.url}`);\n                }\n            });\n        };\n        const handleResponse = async (currentSpan)=>{\n            var _cacheEntry_value;\n            const responseGenerator = async ({ previousCacheEntry })=>{\n                try {\n                    if (!(0,next_dist_server_request_meta__WEBPACK_IMPORTED_MODULE_3__.getRequestMeta)(req, 'minimalMode') && isOnDemandRevalidate && revalidateOnlyGenerated && !previousCacheEntry) {\n                        res.statusCode = 404;\n                        // on-demand revalidate always sets this header\n                        res.setHeader('x-nextjs-cache', 'REVALIDATED');\n                        res.end('This page could not be found');\n                        return null;\n                    }\n                    const response = await invokeRouteModule(currentSpan);\n                    req.fetchMetrics = context.renderOpts.fetchMetrics;\n                    let pendingWaitUntil = context.renderOpts.pendingWaitUntil;\n                    // Attempt using provided waitUntil if available\n                    // if it's not we fallback to sendResponse's handling\n                    if (pendingWaitUntil) {\n                        if (ctx.waitUntil) {\n                            ctx.waitUntil(pendingWaitUntil);\n                            pendingWaitUntil = undefined;\n                        }\n                    }\n                    const cacheTags = context.renderOpts.collectedTags;\n                    // If the request is for a static response, we can cache it so long\n                    // as it's not edge.\n                    if (isIsr) {\n                        const blob = await response.blob();\n                        // Copy the headers from the response.\n                        const headers = (0,next_dist_server_web_utils__WEBPACK_IMPORTED_MODULE_11__.toNodeOutgoingHttpHeaders)(response.headers);\n                        if (cacheTags) {\n                            headers[next_dist_lib_constants__WEBPACK_IMPORTED_MODULE_13__.NEXT_CACHE_TAGS_HEADER] = cacheTags;\n                        }\n                        if (!headers['content-type'] && blob.type) {\n                            headers['content-type'] = blob.type;\n                        }\n                        const revalidate = typeof context.renderOpts.collectedRevalidate === 'undefined' || context.renderOpts.collectedRevalidate >= next_dist_lib_constants__WEBPACK_IMPORTED_MODULE_13__.INFINITE_CACHE ? false : context.renderOpts.collectedRevalidate;\n                        const expire = typeof context.renderOpts.collectedExpire === 'undefined' || context.renderOpts.collectedExpire >= next_dist_lib_constants__WEBPACK_IMPORTED_MODULE_13__.INFINITE_CACHE ? undefined : context.renderOpts.collectedExpire;\n                        // Create the cache entry for the response.\n                        const cacheEntry = {\n                            value: {\n                                kind: next_dist_server_response_cache__WEBPACK_IMPORTED_MODULE_15__.CachedRouteKind.APP_ROUTE,\n                                status: response.status,\n                                body: Buffer.from(await blob.arrayBuffer()),\n                                headers\n                            },\n                            cacheControl: {\n                                revalidate,\n                                expire\n                            }\n                        };\n                        return cacheEntry;\n                    } else {\n                        // send response without caching if not ISR\n                        await (0,next_dist_server_send_response__WEBPACK_IMPORTED_MODULE_10__.sendResponse)(nodeNextReq, nodeNextRes, response, context.renderOpts.pendingWaitUntil);\n                        return null;\n                    }\n                } catch (err) {\n                    // if this is a background revalidate we need to report\n                    // the request error here as it won't be bubbled\n                    if (previousCacheEntry == null ? void 0 : previousCacheEntry.isStale) {\n                        await routeModule.onRequestError(req, err, {\n                            routerKind: 'App Router',\n                            routePath: srcPage,\n                            routeType: 'route',\n                            revalidateReason: (0,next_dist_server_instrumentation_utils__WEBPACK_IMPORTED_MODULE_9__.getRevalidateReason)({\n                                isRevalidate,\n                                isOnDemandRevalidate\n                            })\n                        }, routerServerContext);\n                    }\n                    throw err;\n                }\n            };\n            const cacheEntry = await routeModule.handleResponse({\n                req,\n                nextConfig,\n                cacheKey,\n                routeKind: next_dist_server_route_kind__WEBPACK_IMPORTED_MODULE_1__.RouteKind.APP_ROUTE,\n                isFallback: false,\n                prerenderManifest,\n                isRoutePPREnabled: false,\n                isOnDemandRevalidate,\n                revalidateOnlyGenerated,\n                responseGenerator,\n                waitUntil: ctx.waitUntil\n            });\n            // we don't create a cacheEntry for ISR\n            if (!isIsr) {\n                return null;\n            }\n            if ((cacheEntry == null ? void 0 : (_cacheEntry_value = cacheEntry.value) == null ? void 0 : _cacheEntry_value.kind) !== next_dist_server_response_cache__WEBPACK_IMPORTED_MODULE_15__.CachedRouteKind.APP_ROUTE) {\n                var _cacheEntry_value1;\n                throw Object.defineProperty(new Error(`Invariant: app-route received invalid cache entry ${cacheEntry == null ? void 0 : (_cacheEntry_value1 = cacheEntry.value) == null ? void 0 : _cacheEntry_value1.kind}`), \"__NEXT_ERROR_CODE\", {\n                    value: \"E701\",\n                    enumerable: false,\n                    configurable: true\n                });\n            }\n            if (!(0,next_dist_server_request_meta__WEBPACK_IMPORTED_MODULE_3__.getRequestMeta)(req, 'minimalMode')) {\n                res.setHeader('x-nextjs-cache', isOnDemandRevalidate ? 'REVALIDATED' : cacheEntry.isMiss ? 'MISS' : cacheEntry.isStale ? 'STALE' : 'HIT');\n            }\n            // Draft mode should never be cached\n            if (isDraftMode) {\n                res.setHeader('Cache-Control', 'private, no-cache, no-store, max-age=0, must-revalidate');\n            }\n            const headers = (0,next_dist_server_web_utils__WEBPACK_IMPORTED_MODULE_11__.fromNodeOutgoingHttpHeaders)(cacheEntry.value.headers);\n            if (!((0,next_dist_server_request_meta__WEBPACK_IMPORTED_MODULE_3__.getRequestMeta)(req, 'minimalMode') && isIsr)) {\n                headers.delete(next_dist_lib_constants__WEBPACK_IMPORTED_MODULE_13__.NEXT_CACHE_TAGS_HEADER);\n            }\n            // If cache control is already set on the response we don't\n            // override it to allow users to customize it via next.config\n            if (cacheEntry.cacheControl && !res.getHeader('Cache-Control') && !headers.get('Cache-Control')) {\n                headers.set('Cache-Control', (0,next_dist_server_lib_cache_control__WEBPACK_IMPORTED_MODULE_12__.getCacheControlHeader)(cacheEntry.cacheControl));\n            }\n            await (0,next_dist_server_send_response__WEBPACK_IMPORTED_MODULE_10__.sendResponse)(nodeNextReq, nodeNextRes, new Response(cacheEntry.value.body, {\n                headers,\n                status: cacheEntry.value.status || 200\n            }));\n            return null;\n        };\n        // TODO: activeSpan code path is for when wrapped by\n        // next-server can be removed when this is no longer used\n        if (activeSpan) {\n            await handleResponse(activeSpan);\n        } else {\n            await tracer.withPropagatedContext(req.headers, ()=>tracer.trace(next_dist_server_lib_trace_constants__WEBPACK_IMPORTED_MODULE_8__.BaseServerSpan.handleRequest, {\n                    spanName: `${method} ${req.url}`,\n                    kind: next_dist_server_lib_trace_tracer__WEBPACK_IMPORTED_MODULE_4__.SpanKind.SERVER,\n                    attributes: {\n                        'http.method': method,\n                        'http.target': req.url\n                    }\n                }, handleResponse));\n        }\n    } catch (err) {\n        if (!(err instanceof next_dist_shared_lib_no_fallback_error_external__WEBPACK_IMPORTED_MODULE_14__.NoFallbackError)) {\n            await routeModule.onRequestError(req, err, {\n                routerKind: 'App Router',\n                routePath: normalizedSrcPage,\n                routeType: 'route',\n                revalidateReason: (0,next_dist_server_instrumentation_utils__WEBPACK_IMPORTED_MODULE_9__.getRevalidateReason)({\n                    isRevalidate,\n                    isOnDemandRevalidate\n                })\n            });\n        }\n        // rethrow so that we can handle serving error page\n        // If this is during static generation, throw the error again.\n        if (isIsr) throw err;\n        // Otherwise, send a 500 response.\n        await (0,next_dist_server_send_response__WEBPACK_IMPORTED_MODULE_10__.sendResponse)(nodeNextReq, nodeNextRes, new Response(null, {\n            status: 500\n        }));\n        return null;\n    }\n}\n\n//# sourceMappingURL=app-route.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/next/dist/build/webpack/loaders/next-app-loader/index.js?name=app%2Fapi%2Fargue%2Froute&page=%2Fapi%2Fargue%2Froute&appPaths=&pagePath=private-next-app-dir%2Fapi%2Fargue%2Froute.ts&appDir=%2FUsers%2Fzhangtao%2FDocuments%2FWeb%2Fchaojia%2Fapp&pageExtensions=tsx&pageExtensions=ts&pageExtensions=jsx&pageExtensions=js&rootDir=%2FUsers%2Fzhangtao%2FDocuments%2FWeb%2Fchaojia&isDev=true&tsconfigPath=tsconfig.json&basePath=&assetPrefix=&nextConfigOutput=&preferredRegion=&middlewareConfig=e30%3D&isGlobalNotFoundEnabled=!\n");

/***/ }),

/***/ "(rsc)/./node_modules/next/dist/build/webpack/loaders/next-flight-client-entry-loader.js?server=true!":
/*!******************************************************************************************************!*\
  !*** ./node_modules/next/dist/build/webpack/loaders/next-flight-client-entry-loader.js?server=true! ***!
  \******************************************************************************************************/
/***/ (() => {



/***/ }),

/***/ "(ssr)/./node_modules/next/dist/build/webpack/loaders/next-flight-client-entry-loader.js?server=true!":
/*!******************************************************************************************************!*\
  !*** ./node_modules/next/dist/build/webpack/loaders/next-flight-client-entry-loader.js?server=true! ***!
  \******************************************************************************************************/
/***/ (() => {



/***/ }),

/***/ "../app-render/action-async-storage.external":
/*!*******************************************************************************!*\
  !*** external "next/dist/server/app-render/action-async-storage.external.js" ***!
  \*******************************************************************************/
/***/ ((module) => {

"use strict";
module.exports = require("next/dist/server/app-render/action-async-storage.external.js");

/***/ }),

/***/ "../app-render/after-task-async-storage.external":
/*!***********************************************************************************!*\
  !*** external "next/dist/server/app-render/after-task-async-storage.external.js" ***!
  \***********************************************************************************/
/***/ ((module) => {

"use strict";
module.exports = require("next/dist/server/app-render/after-task-async-storage.external.js");

/***/ }),

/***/ "./work-async-storage.external":
/*!*****************************************************************************!*\
  !*** external "next/dist/server/app-render/work-async-storage.external.js" ***!
  \*****************************************************************************/
/***/ ((module) => {

"use strict";
module.exports = require("next/dist/server/app-render/work-async-storage.external.js");

/***/ }),

/***/ "./work-unit-async-storage.external":
/*!**********************************************************************************!*\
  !*** external "next/dist/server/app-render/work-unit-async-storage.external.js" ***!
  \**********************************************************************************/
/***/ ((module) => {

"use strict";
module.exports = require("next/dist/server/app-render/work-unit-async-storage.external.js");

/***/ }),

/***/ "next/dist/compiled/next-server/app-page.runtime.dev.js":
/*!*************************************************************************!*\
  !*** external "next/dist/compiled/next-server/app-page.runtime.dev.js" ***!
  \*************************************************************************/
/***/ ((module) => {

"use strict";
module.exports = require("next/dist/compiled/next-server/app-page.runtime.dev.js");

/***/ }),

/***/ "next/dist/compiled/next-server/app-route.runtime.dev.js":
/*!**************************************************************************!*\
  !*** external "next/dist/compiled/next-server/app-route.runtime.dev.js" ***!
  \**************************************************************************/
/***/ ((module) => {

"use strict";
module.exports = require("next/dist/compiled/next-server/app-route.runtime.dev.js");

/***/ }),

/***/ "next/dist/shared/lib/no-fallback-error.external":
/*!******************************************************************!*\
  !*** external "next/dist/shared/lib/no-fallback-error.external" ***!
  \******************************************************************/
/***/ ((module) => {

"use strict";
module.exports = require("next/dist/shared/lib/no-fallback-error.external");

/***/ }),

/***/ "next/dist/shared/lib/router/utils/app-paths":
/*!**************************************************************!*\
  !*** external "next/dist/shared/lib/router/utils/app-paths" ***!
  \**************************************************************/
/***/ ((module) => {

"use strict";
module.exports = require("next/dist/shared/lib/router/utils/app-paths");

/***/ })

};
;

// load runtime
var __webpack_require__ = require("../../../webpack-runtime.js");
__webpack_require__.C(exports);
var __webpack_exec__ = (moduleId) => (__webpack_require__(__webpack_require__.s = moduleId))
var __webpack_exports__ = __webpack_require__.X(0, ["vendor-chunks/next"], () => (__webpack_exec__("(rsc)/./node_modules/next/dist/build/webpack/loaders/next-app-loader/index.js?name=app%2Fapi%2Fargue%2Froute&page=%2Fapi%2Fargue%2Froute&appPaths=&pagePath=private-next-app-dir%2Fapi%2Fargue%2Froute.ts&appDir=%2FUsers%2Fzhangtao%2FDocuments%2FWeb%2Fchaojia%2Fapp&pageExtensions=tsx&pageExtensions=ts&pageExtensions=jsx&pageExtensions=js&rootDir=%2FUsers%2Fzhangtao%2FDocuments%2FWeb%2Fchaojia&isDev=true&tsconfigPath=tsconfig.json&basePath=&assetPrefix=&nextConfigOutput=&preferredRegion=&middlewareConfig=e30%3D&isGlobalNotFoundEnabled=!")));
module.exports = __webpack_exports__;

})();